// Generated by CoffeeScript 1.6.3
(function() {
  var $, defaultConfig, rotateConfig;

  $ = jQuery;

  defaultConfig = {
    menu: null,
    radius: 50,
    radian: 360,
    speed: 160,
    event: 'click'
  };

  $.extend($.easing, {
    easeInQuad: function(x, t, b, c, d) {
      return c * (t /= d) * t + b;
    },
    easeOutQuad: function(x, t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    },
    easeInOutQuad: function(x, t, b, c, d) {
      if ((t /= d / 2) < 1) {
        return c / 2 * t * t + b;
      }
      return -c / 2 * ((--t) * (t - 2) - 1) + b;
    },
    easeInCubic: function(x, t, b, c, d) {
      return c * (t /= d) * t * t + b;
    },
    easeOutCubic: function(x, t, b, c, d) {
      return c * ((t = t / d - 1) * t * t + 1) + b;
    },
    easeInOutCubic: function(x, t, b, c, d) {
      if ((t /= d / 2) < 1) {
        return c / 2 * t * t * t + b;
      }
      return c / 2 * ((t -= 2) * t * t + 2) + b;
    },
    easeInQuart: function(x, t, b, c, d) {
      return c * (t /= d) * t * t * t + b;
    },
    easeOutQuart: function(x, t, b, c, d) {
      return -c * ((t = t / d - 1) * t * t * t - 1) + b;
    },
    easeInOutQuart: function(x, t, b, c, d) {
      if ((t /= d / 2) < 1) {
        return c / 2 * t * t * t * t + b;
      }
      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    },
    easeInQuint: function(x, t, b, c, d) {
      return c * (t /= d) * t * t * t * t + b;
    },
    easeOutQuint: function(x, t, b, c, d) {
      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    },
    easeInOutQuint: function(x, t, b, c, d) {
      if ((t /= d / 2) < 1) {
        return c / 2 * t * t * t * t * t + b;
      }
      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    },
    easeInSine: function(x, t, b, c, d) {
      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
    },
    easeOutSine: function(x, t, b, c, d) {
      return c * Math.sin(t / d * (Math.PI / 2)) + b;
    },
    easeInOutSine: function(x, t, b, c, d) {
      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    },
    easeInExpo: function(x, t, b, c, d) {
      var bx;
      bx = c * Math.pow(2, 10 * (t / d - 1)) + b;
      if (t === 0) {
        bx = b;
      }
      return bx;
    },
    easeOutExpo: function(x, t, b, c, d) {
      var bc;
      bc = b + c;
      if (t !== d) {
        bc = c * (-Math.pow(2, -10 * t / d) + 1) + b;
      }
      return bc;
    },
    easeInOutExpo: function(x, t, b, c, d) {
      if (t === 0) {
        return b;
      }
      if (t === d) {
        return b + c;
      }
      if ((t /= d / 2) < 1) {
        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
      }
      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function(x, t, b, c, d) {
      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
    },
    easeOutCirc: function(x, t, b, c, d) {
      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
    },
    easeInOutCirc: function(x, t, b, c, d) {
      if ((t /= d / 2) < 1) {
        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
      }
      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    },
    easeInElastic: function(x, t, b, c, d) {
      var a, p, s;
      s = 1.70158;
      p = 0;
      a = c;
      if (t === 0) {
        return b;
      }
      if ((t /= d) === 1) {
        return b + c;
      }
      if (!p) {
        p = d * .3;
      }
      if (a < Math.abs(c)) {
        a = c;
        s = p / 4;
      } else {
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }
      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    },
    easeOutElastic: function(x, t, b, c, d) {
      var a, p, s;
      s = 1.70158;
      p = 0;
      a = c;
      if (t === 0) {
        return b;
      }
      if ((t /= d) === 1) {
        return b + c;
      }
      if (!p) {
        p = d * .3;
      }
      if (a < Math.abs(c)) {
        a = c;
        s = p / 4;
      } else {
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }
      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    }
  });

  $.fn.path = function(opts) {
    var easArr, k, menus, pathItem, radian, radians, radius;
    opts = $.extend({}, defaultConfig, opts);
    if (!opts.menu) {
      return this;
    }
    pathItem = $(this);
    menus = $(opts.menu);
    easArr = [];
    for (k in $.easing) {
      easArr.push(k);
    }
    radians = Math.PI / 180;
    radius = opts.radius;
    radian = opts.radian;
    pathItem.on(opts.event, function() {
      var len, speed;
      if ($(opts.menu + ':animated').length) {
        return;
      }
      speed = opts.speed;
      len = menus.length;
      if (radian !== 360) {
        len = len - 1;
      }
      menus.each(function(i) {
        var item, rd, rdNum, x, y;
        item = $(this);
        rd = i * radian / len * radians;
        x = radius * Math.cos(rd) + 35;
        y = radius * Math.sin(rd) + 35;
        rdNum = Math.floor(Math.random() * easArr.length);
        speed += i * 10;
        item.rotate();
        if (item.is(':hidden')) {
          item.show().animate({
            top: [y, easArr[rdNum]],
            left: [x, easArr[rdNum]]
          }, speed);
        } else {
          item.animate({
            top: [y, easArr[rdNum]],
            left: [x, easArr[rdNum]]
          }).animate({
            top: [35, easArr[rdNum]],
            left: [35, easArr[rdNum]]
          }, speed, function() {
            item.hide();
          });
        }
      });
    });
  };

  rotateConfig = {
    speed: 1,
    degrees: '',
    time: 0
  };

  $.fn.rotate = function(opts) {
    var currentDegree, degrees, item, timer;
    opts = $.extend({}, rotateConfig, opts);
    item = $(this);
    degrees = opts.degrees;
    currentDegree = 0;
    timer = setInterval(function() {
      if (item.is(':hidden')) {
        clearInterval(timer);
        return;
      }
      if (opts.degrees === '' || currentDegree < degrees - 1) {
        currentDegree += opts.speed;
      } else {
        clearInterval(timer);
        if (opts.degrees !== '') {
          degrees += opts.degrees;
        }
      }
      if (currentDegree % 360 === 0) {
        currentDegree = 0;
        degrees = (currentDegree + degrees) % 360;
      }
      return item.css({
        '-webkit-transform': 'rotate(' + currentDegree + 'deg)',
        '-moz-transform': 'rotate(' + currentDegree + 'deg)',
        '-ms-transform': 'rotate(' + currentDegree + 'deg)',
        '-o-transform': 'rotate(' + currentDegree + 'deg)',
        'transform': 'rotate(' + currentDegree + 'deg)'
      });
    }, opts.time);
  };

}).call(this);
